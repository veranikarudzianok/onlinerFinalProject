{"name": "test_buy_filtered_laptop", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "set_up = None\n\n    @allure.description(\"Test buy filtered laptop\")\n    def test_buy_filtered_laptop(set_up):\n        options = webdriver.ChromeOptions()\n        options.add_experimental_option(\"detach\", True)\n        g = Service('C:\\\\PyCharmProjects\\\\1\\\\chromedriver.exe')\n        driver_g = webdriver.Chrome(options=options, service=g)\n        options.add_argument('--ignore-certificate-errors')\n        options.add_argument('--ignore-ssl-errors')\n        options.add_experimental_option('excludeSwitches', ['enable-logging'])\n    \n        \"\"\"Pages\"\"\"\n        main_page = MainPage(driver_g)\n        catalog_page = CatalogPage(driver_g)\n        comparison_page = ComparisonPage(driver_g)\n        laptop_page = LaptopPage(driver_g)\n        cart_page = CartPage(driver_g)\n        order_page = OrderPage(driver_g)\n        base_class = Base(driver_g)\n    \n        \"\"\"Test run\"\"\"\n        main_page.open_website()\n        main_page.open_catalog()\n        # catalog_page.check_catalog_navigation_title()\n        catalog_page.open_computers_and_networks()\n        catalog_page.open_laptops_computers_monitors()\n        catalog_page.open_laptops()\n        catalog_page.close_popover()\n        catalog_page.check_laptops_title()\n        catalog_page.confirm_city()\n        catalog_page.check_city()\n        catalog_page.open_all_producers()\n        catalog_page.check_number_of_producers()\n        catalog_page.open_all_producers()\n        catalog_page.select_producer()\n        catalog_page.enter_max_price()\n        catalog_page.select_purpose()\n        catalog_page.select_screen_size()\n        catalog_page.check_producer()\n        # catalog_page.check_max_price()\n        catalog_page.check_purpose()\n        # catalog_page.check_screen_size()\n        catalog_page.check_default_order_base()\n>       catalog_page.select_order_option()\n\ntests\\test_buy_laptop.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\catalog_page.py:361: in select_order_option\n    self.assert_word(self.get_order_base(), self.order_option_text.lower())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.catalog_page.CatalogPage object at 0x0000025565878750>\nword = <selenium.webdriver.remote.webelement.WebElement (session=\"47c0dac2ba9f70b4fcebaa07a1113df6\", element=\"4F2DD22AC3F53C29173A43B67927E88C_element_598\")>, result = 'дешевые'\n\n    def assert_word(self, word, result):\n        value_word = word.text\n        print('Text is:', value_word)\n>       assert value_word == result\nE       AssertionError\n\nbase\\base_class.py:23: AssertionError"}, "description": "Test buy filtered laptop", "steps": [{"name": "Open website", "status": "passed", "start": 1697985474320, "stop": 1697985475983}, {"name": "Open Catalog page", "status": "passed", "start": 1697985475983, "stop": 1697985477288}, {"name": "Open computers and networks", "status": "passed", "start": 1697985477288, "stop": 1697985477404}, {"name": "Open laptops, computers, monitors", "status": "passed", "start": 1697985477404, "stop": 1697985477540}, {"name": "Open laptops", "status": "passed", "start": 1697985477540, "stop": 1697985479277}, {"name": "Close popover", "status": "passed", "start": 1697985479277, "stop": 1697985479629}, {"name": "Check laptops title", "status": "passed", "start": 1697985479630, "stop": 1697985479677}, {"name": "Confirm city", "status": "passed", "start": 1697985479678, "stop": 1697985479816}, {"name": "Check city", "status": "passed", "start": 1697985479816, "stop": 1697985479877}, {"name": "Open all producers", "status": "passed", "start": 1697985479877, "stop": 1697985482006}, {"name": "Check number of producers", "status": "passed", "steps": [{"name": "Check text number of producers", "status": "passed", "start": 1697985482006, "stop": 1697985482058}, {"name": "Count number of producers", "status": "passed", "start": 1697985482058, "stop": 1697985482088}], "start": 1697985482006, "stop": 1697985482092}, {"name": "Open all producers", "status": "passed", "start": 1697985482093, "stop": 1697985484187}, {"name": "Select producer", "status": "passed", "start": 1697985484187, "stop": 1697985484367}, {"name": "Enter max price", "status": "passed", "start": 1697985484367, "stop": 1697985484561}, {"name": "Select purpose", "status": "passed", "start": 1697985484561, "stop": 1697985484712}, {"name": "Select screen size", "status": "passed", "start": 1697985484712, "stop": 1697985484856}, {"name": "Check producer", "status": "passed", "start": 1697985484856, "stop": 1697985484950}, {"name": "Check purpose", "status": "passed", "start": 1697985484950, "stop": 1697985485018}, {"name": "Check default order base", "status": "passed", "start": 1697985485018, "stop": 1697985485060}, {"name": "Select order option", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\PyCharmProjects\\1\\pages\\catalog_page.py\", line 361, in select_order_option\n    self.assert_word(self.get_order_base(), self.order_option_text.lower())\n  File \"C:\\PyCharmProjects\\1\\base\\base_class.py\", line 23, in assert_word\n    assert value_word == result\n"}, "start": 1697985485060, "stop": 1697985485705}], "attachments": [{"name": "stdout", "source": "08fce5de-ac3b-4234-a8aa-100ae9095686-attachment.txt", "type": "text/plain"}], "start": 1697985473239, "stop": 1697985485777, "uuid": "d0398847-e681-4b9a-9cd1-88aad9f1b012", "historyId": "d521607a747a25b10c426eee9f5f1d56", "testCaseId": "d521607a747a25b10c426eee9f5f1d56", "fullName": "tests.test_buy_laptop#test_buy_filtered_laptop", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_laptop"}, {"name": "host", "value": "DESKTOP-K83B305"}, {"name": "thread", "value": "15800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_laptop"}]}